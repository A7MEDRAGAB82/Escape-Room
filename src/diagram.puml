@startuml
abstract class User {
  - username: String
  - role: String
  - hashedPassword: String
  + User(username: String, role: String, plainTextPassword: String)
  + verifyPassword(plainTextPassword: String): boolean
  + getHashedPassword(): String
  + getUsername(): String
  + getRole(): String
  + getHashedPassword(): String
  + accessDashboard(): void
}

class Admin {
  + Admin(username: String, plainTextPassword: String)
  + generateReport(): Report
  + addRoom(room: EscapeRoom): void
  + deactivateRoom(room: EscapeRoom): void
  + accessDashboard(): void
}

class Staff {
  + Staff(username: String, plainTextPassword: String)
  + accessDashboard(): void
}

class Customer {
  + Customer(username: String, password: String)
  + isRoomAvailable(room: EscapeRoom, dt: LocalDateTime): boolean
  + makeBooking(room: EscapeRoom, dt: LocalDateTime, players: int): Booking
  + checkStatus(booking: Booking): String
  + cancelBooking(booking: Booking): void
  + accessDashboard(): void
}

User <|-- Admin
User <|-- Staff
User <|-- Customer

class Booking {
  - bookingId: String
  - room: EscapeRoom
  - dateTime: LocalDateTime
  - players: ArrayList<Player>
  - status: String
  - {static} OPENING: LocalTime = 10:00
  - {static} CLOSING: LocalTime = 22:00
  + Booking(room: EscapeRoom, dateTime: LocalDateTime, players: int)
  + addPlayer(player: Player): void
  + getDateTime(): LocalDateTime
  + getRoom(): EscapeRoom
  + getStatus(): String
  + cancel(): void
  + isActive(): boolean
}

class EscapeRoom {
  - id: String
  - name: String
  - difficulty: int
  - clues: ArrayList<Clue>
  - bookings: List<Booking>
  - maxPlayers: int
  - isActive: boolean
  + EscapeRoom(id: String, name: String, difficulty: int, maxPlayers: int)
  + addClue(clue: Clue): void
  + getClues(): ArrayList<Clue>
  + getName(): String
  + getDifficulty(): int
  + getMaxPlayers(): int
  + addBooking(booking: Booking): void
  + getBookings(): List<Booking>
  + deactivate(): void
  + isActive(): boolean
}

class Player {
  - name: String
  - startTime: LocalDateTime
  - solvedClues: ArrayList<Clue>
  + Player(name: String)
  + getName(): String
  + addSolvedClue(clue: Clue): void
  + getSolvedClues(): ArrayList<Clue>
  + getTimeElapsed(): Duration
}

class Clue {
  - description: String
  - solution: String
  - type: String
  - solved: boolean
  + isSolved(): boolean
  + getHint(): String
  + solve(): void
  + Clue(description: String, solution: String, type: String)
  + getDescription(): String
  + getType(): String
}

class PuzzleClue {
  - puzzleDetails: String
  + PuzzleClue(description: String, solution: String, puzzleDetails: String)
  + getPuzzleDetails(): String
}

Clue <|-- PuzzleClue
interface Solvable {
  + isSolved(): boolean
  + getHint(): String
}

Clue ..|> Solvable

class Report {
  - reportId: String
  - data: Map<String, Object>
  - generatedDate: LocalDate
  + Report(data: Map<String, Object>)
  + getData(): Map<String, Object>
  + getGeneratedDate(): LocalDate
  + getReportId(): String
  + addData(key: String, val: Object): void
  + removeData(key: String): void
}

class Business {
  - name: String
  - rooms: ArrayList<EscapeRoom>
  + Business(name: String)
  + addRoom(room: EscapeRoom): void
  + getName(): String
  + searchRooms(query: String): ArrayList<EscapeRoom>
  + getRooms(): ArrayList<EscapeRoom>
  + getRoomCount(): int
  + removeRoom(room: EscapeRoom): boolean
}

class BookingStatus {
  + {static} CONFIRMED: String = "Confirmed"
  + {static} CANCELLED: String = "Cancelled"
}

class DBConnector {
  + {static} connect(): Connection
}

EscapeRoom "1" *-- "many" Booking
EscapeRoom "1" *-- "many" Clue
Player "1" *-- "0..*" Clue : solvedClues
Booking "1" *-- "2..5" Player : players
Booking "1" --> "1" EscapeRoom : room
Booking ..> BookingStatus : uses
Business "1" o-- "0..*" EscapeRoom : contains
Admin --> Report
Customer --> Booking
Player --> Clue
@enduml
